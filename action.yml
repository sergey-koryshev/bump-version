name: "Bump Version"
description: "The action increments version of specified project and submit it to repository"

inputs:
  project-type:
    description: "Project type: Node, Posh, Custom"
    required: true
  version-configuration-path:
    description: "Full path to version configuration"
    required: true
  app-name:
    description: "Project name (used for commit name)"
    required: false
    default: ""
  posh-module-name:
    description: "Name of powershell module, needs to be specified in case of project type 'Posh'"
    required: false
    default: ""
  posh-custom-module-path:
    description: "Path to powershell module with custom logic to get/set version, needs to be specified in case of project type 'Custom'"
    required: false
    default: ""
  skip-tag:
    description: "Indicates if wether the workflow will create tag or not"
    required: false
    default: "false"
  workspace-name:
    description: "Name of npm-workspace where version need to be incremented. Can be specified in case of project type 'Node'"
    required: false
    default: ""
  override-increment-parts:
    description: "Comma separated version parts to increment. If specified, it forces the workflow to increment specified version parts instead of determined based on PR's label"
    required: false
    default: ""

outputs:
  new-version:
    description: "Incremented version"
    value: ${{ steps.bump-version.outputs.new-version }}

runs:
  using: "composite"
  steps:
    - name: Checkout build-system repository
      uses: actions/checkout@v4
      with:
        repository: sergey-koryshev/build-system
        path: sk-build-system
        ref: version-helper-v1.4.0
    - name: Pull latest changes
      run: git pull
    - name: Bump version
      id: bump-version
      shell: pwsh
      runn: |
        $env:PSModulePath = $env:PSModulePath + "$([System.IO.Path]::PathSeparator)$(Join-Path "${{ github.workspace }}" "sk-build-system" "scripts/ps")"
        Import-Module VersionHelper -Force -Verbose
        $splitRepositoryName = "${{ github.repository }}" -split "/"

        if ($splitRepositoryName.Length -ne 2) {
          throw "Repository name cannot be parsed: ${{ github.repository }}"
        }

        $fullPoShCustomModulePath = $null

        if (-not ([string]::IsNullOrWhiteSpace("${{ inputs.posh-custom-module-path }}"))) {
          $fullPoShCustomModulePath = $(Join-Path "${{ github.workspace }}" "${{ inputs.posh-custom-module-path }}")
        }

        $overrideIncrementParts = @()

        if (-not ([string]::IsNullOrWhiteSpace("${{ inputs.override-increment-parts }}"))) {
          $overrideIncrementParts = "${{ inputs.override-increment-parts }}" -split ","
        }

        $newVersion = Submit-NewVersionLabel -ProjectType ${{ inputs.project-type }} -PowerShellModuleName "${{ inputs.posh-module-name }}" -CustomPowershellModulePath $fullPoShCustomModulePath -SHA "${{ github.sha }}" -Owner $splitRepositoryName[0] -Repository $splitRepositoryName[1] -VersionConfigurationPath (Join-Path "${{ github.workspace }}" "${{ inputs.version-configuration-path }}") -AuthToken ${{ secrets.GITHUB_TOKEN }} -WorkspaceName "${{ inputs.workspace-name }}" -OverrideIncrementParts $overrideIncrementParts -Verbose
        "new-version=$newVersion" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
    - name: Commit New Version
      shell: pwsh
      run: |
        function Invoke-CommandSafely {
          param(
            [string]
            $Command
          )

          Invoke-Expression "& $Command" -ErrorAction Stop
          
          if ($LASTEXITCODE -ne 0) {
            throw "Command [$Command] failed to execute."
          }
        }

        Write-Host "====== Setting up git ======"
        Invoke-CommandSafely "git config --global user.name ""$env:GITHUB_ACTOR"""
        Invoke-CommandSafely "git config --global user.email ""$env:GITHUB_ACTOR@users.noreply.github.com"""
        Invoke-CommandSafely "git config --global push.followTags true"

        Write-Host
        Write-Host "====== Pulling last changes ======"
        Invoke-CommandSafely "git stash"
        Invoke-CommandSafely "git pull"
        Invoke-CommandSafely "git stash pop"

        Write-Host
        Write-Host "====== Submitting changes ======"
        $annotation = "Bumped ${{ inputs.app-name }}$([string]::IsNullOrWhiteSpace('${{ inputs.app-name }}') ? [string]::Empty : ' ')version to ${{ env.new-version }}"
        Invoke-CommandSafely "git commit -am ""[automated] $annotation [skip ci]"""

        if ("${{ inputs.skip-tag }}" -eq "false") {
          Invoke-CommandSafely "git tag -a -m ""$annotation"" ""${{ inputs.app-name }}$([string]::IsNullOrWhiteSpace('${{ inputs.app-name }}') ? [string]::Empty : '-')v${{ env.new-version }}"""
        }

        Invoke-CommandSafely "git push"